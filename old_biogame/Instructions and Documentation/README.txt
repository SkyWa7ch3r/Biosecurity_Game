================================================
================BIOSECURITY GAME================
==========Online Economic Experiment============
==School of Agricultural and Resource Economics=
================================================
       Licenced under (CC BY-NC 4.0)


=================Introduction===================
Players of the Biosecurity Game act as farmers making decisions about the biosecurity of their fields.
During each round of the game players can exert any amount of biosecurity effort, at the cost of their
own funds, in order to reduce the likleyhood of a biosecurity incusrion for the group as a whole. The
game can be run in a number of configurations, including with parameters varying round-by-round,
with periodic inter-player communication via in-game chat and with asymetric gameplay (one player
goes before all others and their decision is known to them). Prior to playing the game, players
complete a "Lottery" Game to asses their risk aversion and after the experiment they complete a
short questionaire. The funds a player has at the end of the experiment form the basis for their payment.
The game can be played remotley or in a lab environement. 

The experiment is implemented using oTree, "a Django-based framework for implementing multiplayer decision
strategy games". The Experiment was written primarily in python, with some front-end development in HTML 
and JS. This project was commissioned by Assoc/Prof Benedict White and Dr Mark Hurlstone. The project was
based on the work Grace McKie in her 2015 paper "Prevention of a Rapidly Spreading Orchard Pest: Higher
Outbreak-Risks and Communication". The game was implemented by Campbell Beck, Justin Chong, Joel Dunstan,
Willem Meyer and Trae Shaw. All other involved parties  have been mentioned referenced with their attributed
work within the code-base.

=============Directory Navigation===============
The root directory contains 4 major subdirectories. Their names and contents are:
	-Lottery: The classes and files relating to the running of Lottery Game App. Static contains the images
	used by in-game webpages. Templates contains the html/css/js for the rendering of the game's webpages.
	Also includes folders generated by oTree (can be ignored) as well as an otree-tages file which need to
	be inserted into the otree subdirectory in the python installation directory (see installation).
	Models.py contains the backend workings of the app. Views.py contains logic for when pages display, as 
	well their sequencing and which variables are passed to be displayed. Tests.py contains code for bots 
	that test various in-app features.

	-Biosecurity: The classes and files relating to the running of Biosecurity Game App. Static contains
	the images used by in-game webpages. Templates contains the html/css/js for the rendering of the game's
	webpages. The Profanity directory contains a list of words to be screened for the chat filter.
	Models.py contains the backend workings of the app. Views.py contains logic for when pages display, as
	well their sequencing and which variables are passed to be displayed. Tests.py contains code for bots
	that test various in-app features. srvr.py contains the backend for the chat feature utilised in-app.
	Biosecurity Optimizer allows for testing of optimal player strategies and expected maximum payouts.

	-Results: The classes and files relating to the running of Results App. Static contains the images
	used by in-game webpages. Templates contains the html/css/js for the rendering of the game's webpages. 
	Models.py contains the backend workings of the app. Views.py contains logic for when pages display, as 
	well their sequencing and which variables are passed to be displayed. Tests.py contains code for bots
	that test various in-app features.

	-CSV: Contains csv files used to pass information to the game in bulk. Player in-game names, The
	structure of the lottery game, questions for the questionare and custom in-game values can be passed
	into the game from here using these files.

The file settings.py controls how the various apps are sequenced in the game. It contains metadata about
the game as well as game parameters that admins can customize when creating a session. 

====Running the Experiment======
For a user to access the experiment as administrator in order to create sessions, and see the results of 
the games, one will need to goto biosecurity.are.uwa.edu.au and login.
To have a look at games running, you can use the "Demo" in the navigation banner which will show a page of the game configurations
that can be run. The Demo games will read the defaults as set in the settings.py "SESSION_CONFIGS", once a game 
has been selected by clicking it, a new tab will open with single-use links available at the bottom.
A user should click these single-use links which will open a new tab for every player, allowing a user to play the game by themselves.
The Demo will play the game all the way through but will not save the results in the automatic database created by oTree.

If a user is looking to make a session and save the results, one will need to use the "Session" in the navigation banner.
In the page that loads up will be two forms, one will be a drop down which displays the all the session configurations you
can choose, the other is a form for the number of participants in the session. Choose "Biosecurity Game", and then click on
"Configure Session", a list of forms and checkboxes will appear, each one controls a variable inside the game e.g. players_per_group
controls the number of players per group in the session. Change these variables as you please, but keep in mind these variables could
radically change the behaviour of the game, namely how many incursions occur and the difficulty of the game. When you are done configuring
the sessions click "Create". The website will direct the user to the session page, on this page you have one of two choices:

1) Use the Session-Wide Links with a participant_label parameter (Recommended)
	To test your configurations with Session-Wide Links you have two main options, you may send these links without a 
	participant_label parameter which will allow everyone to use the same link. However this link will allow one person
	to play as two users, and cannot gurantee that every participant is a different user. The Recommended option is to use
	these links with a participant_label parameter, to use a participant_label parameter in a url you need to copy the
	Session-Wide Link e.g. http://biosecurity.are.uwa.edu.au/join/<session-ID>/ and add this onto the end of the url before
	hitting enter in a new tab ?participant_label=<Name of participant>. The full url will be as below:
	
	http://biosecurity.are.uwa.edu.au/join/9ujkn6rbsv/?participant_label=<Name of participant>
	
	This will not allow a user to use the link more than once, and it will fill in the participant_label variable
	which will show up in the payments page which is useful for knowing how much payment is owed to each person.
	Once you have used these links to goto the start of the game, you may play the game by yourself or with others.
	
2) Use the Single-use links
	To test your configurations using single-use links, click on the links and it will open a new tab for every user.
	If you have use_browser_bots enabled, the browser bots will start and play the game for you until completion.
	You can now use these tabs that have been opened for each player and play the game by yourself for testing out your
	configurations. In the event you want other players to play the game using the single-use links, you will need to send
	every player a link (via email is best), every player must receive a different link.

FULL INSTRUCTIONS ARE IN THE Biosecurity Game: Administration Instructions

